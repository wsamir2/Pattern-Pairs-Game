×







☰
Moo ICT – Project Based Tutorials
 
C# Tutorial – Create a Picture Matching Game with .Net in Visual Studio
Subject: C# TutorialsLearning Time: 1 hour
Hi, in this tutorial we will make a picture matching game. in this game you will match 2 pictures by clicking on the empty picture boxes. The game will load the pictures in random positions in the Grid and when one of them is clicked it will reveal the hidden picture. If two pictures are matched then it will keep both of them on the display. The game will continue until all 6 pictures are matched or if the timer goes to 0. You can restart the game and it will randomize the pictures again in the game so the game is always dynamically changing the locations of the pictures. We will be using picture box tags in the windows form framework to randomly position them across the grid.

C# Flappy Bird Hunting Game
Hunt down the elusive Flappy Bird
Fully commented source code
Step by Step Full Instructions
Build the EXE file
Join the Course Now
There is a older version of this game tutorial available @ super hero memory matching game tutorial. 

Lesson objectives –


Make a picture matching game with C# and .Net in Visual Studio
Use .Net Windows Form to make the game
Load external files to the windows form
Create a 3×3 grid in Windows form and load the pictures randomly.
Dynamically add click events to the picture boxes
Work with buttons, labels and timer in the game
use Lists, Boolean, Integers, strings and Loops in the game
Shuffle or randomize a list, use that list to assign pictures to the grid
 

Video Tutorial –


 

Download the Images for this tutorial

Download the Picture Matching Memory Game on GitHub


 

Full Source Code –

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
namespace Memory_Matching_Game_in_.Net_MOO_ICT
{
    public partial class Form1 : Form
    {
        List<int> numbers = new List<int> {1,1,2,2,3,3,4,4,5,5,6,6};
        string firstChoice;
        string secondChoice;
        int tries;
        List<PictureBox> pictures = new List<PictureBox>();
        PictureBox picA;
        PictureBox picB;
        int totalTime = 30;
        int countDownTime;
        bool gameOver = false;
        public Form1()
        {
            InitializeComponent();
            LoadPictures();
        }
        private void TimerEvent(object sender, EventArgs e)
        {
            countDownTime--;
            lblTimeLeft.Text = "Time Left: " + countDownTime;
            if (countDownTime < 1)
            {
                GameOver("Times Up, You Lose");
                foreach (PictureBox x in pictures)
                {
                    if (x.Tag != null)
                    {
                        x.Image = Image.FromFile("pics/" + (string)x.Tag + ".png");
                    }
                }
            }
        }
        private void RestartGameEvent(object sender, EventArgs e)
        {
            RestartGame();
        }
        private void LoadPictures()
        {
            int leftPos = 20;
            int topPos = 20;
            int rows = 0;
            for (int i = 0; i < 12; i++)
            {
                PictureBox newPic = new PictureBox();
                newPic.Height = 50;
                newPic.Width = 50;
                newPic.BackColor = Color.LightGray;
                newPic.SizeMode = PictureBoxSizeMode.StretchImage;
                newPic.Click += NewPic_Click;
                pictures.Add(newPic);
                if (rows < 3)
                {
                    rows++;
                    newPic.Left = leftPos;
                    newPic.Top = topPos;
                    this.Controls.Add(newPic);
                    leftPos = leftPos + 60;
                }
                if (rows == 3)
                {
                    leftPos = 20;
                    topPos += 60;
                    rows = 0;
                }
            }
            RestartGame();
        }
        private void NewPic_Click(object sender, EventArgs e)
        {
            if (gameOver)
            {
                // dont register a click if the game is over
                return;
            }
            if (firstChoice == null)
            {
                picA = sender as PictureBox;
                if (picA.Tag != null && picA.Image == null)
                {
                    picA.Image = Image.FromFile("pics/" + (string)picA.Tag + ".png");
                    firstChoice = (string)picA.Tag;
                }
            }
            else if(secondChoice == null)
            {
                picB = sender as PictureBox;
                if (picB.Tag != null && picB.Image == null)
                {
                    picB.Image = Image.FromFile("pics/" + (string)picB.Tag + ".png");
                    secondChoice = (string)picB.Tag;
                }
            }
            else
            {
                CheckPictures(picA, picB);
            }
        }
        private void RestartGame()
        {
            // randomise the original list
            var randomList = numbers.OrderBy(x => Guid.NewGuid()).ToList();
            // assign the random list to the original
            numbers = randomList;
            for (int i = 0; i < pictures.Count; i++)
            {
                pictures[i].Image = null;
                pictures[i].Tag = numbers[i].ToString();
            }
            tries = 0;
            lblStatus.Text = "Mismatched: " + tries + " times.";
            lblTimeLeft.Text = "Time Left: " + totalTime;
            gameOver = false;
            GameTimer.Start();
            countDownTime = totalTime;
        }
        private void CheckPictures(PictureBox A, PictureBox B)
        {
            if (firstChoice == secondChoice)
            {
                A.Tag = null;
                B.Tag = null;
            }
            else
            {
                tries++;
                lblStatus.Text = "Mismatched " + tries + " times.";
            }
            firstChoice = null;
            secondChoice = null;
            foreach (PictureBox pics in pictures.ToList())
            {
                if (pics.Tag != null)
                {
                    pics.Image = null;
                }
            }
            // now lets check if all of the items have been solved
            if (pictures.All(o => o.Tag == pictures[0].Tag))
            {
                GameOver("Great Work, You Win!!!!");
            }
        }
        private void GameOver(string msg)
        {
            GameTimer.Stop();
            gameOver = true;
            MessageBox.Show(msg + " Click Restart to Play Again.", "Moo Says: ");
        }
    }
}
 

 

Share this:
Click to share on WhatsApp (Opens in new window)Click to share on Telegram (Opens in new window)Click to share on Twitter (Opens in new window)Click to share on LinkedIn (Opens in new window)Click to share on Pinterest (Opens in new window)Click to share on Facebook (Opens in new window)Click to share on Reddit (Opens in new window)Click to share on Tumblr (Opens in new window)Click to print (Opens in new window)
Related
C# Tutorial – Create a Superhero Memory Game
In "C# Tutorials"
C# Tutorial – Make an Image gallery app that shows a Photo and captions of each image displayed
In "C# Tutorials"
C# Tutorial – How to load images from URL to a Picture Box
In "C# Tutorials"

TAGS:
C# TUTORIALMEMORY MATCHING GAMEPICTURE MATCHING GAME
«
C# Tutorial – Make a Binary Calculator Game i
C# Tutorial – Play Multiple sound files in Wi
»


Comments are closed.

Trending Tutorials
C# Tutorial - Create a simple platform game in visual studio
C# Tutorial – Create a Classic Snake Game in Visual Studio
Create flappy bird game in Visual Studio using C#
C# Tutorial – Create a Tic Tac Toe game and play against AI Opponent
C# Tutorial - Create a simple multiple choice quiz game in Visual Studio

New Tutorials
HTML and CSS Tutorial – Create a simple 6 page website and host it online with GitHub Pages
C# Tutorials – Create a simple Pong Game in Windows Forms and Visual Studio
C# Tutorial – How to change data between forms in Visual Studio
C# Tutorial – How to load images from URL to a Picture Box
JavaScript Tutorial – Create a Simple Word Shuffle Typing Game
Home About Contact FAQ Privacy Policy
Moo ICT – Project Based Tutorials - © 2024
Privacy & Cookies: This site uses cookies. By continuing to use this website, you agree to their use.
To find out more, including how to control cookies, see here: Cookie Policy
